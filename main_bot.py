import config
import requests
from SQLiter import Members, Product, Basket, Orders, Keys
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from utils import States

ADMIN = config.MAIN_ADMIN
print(ADMIN)
bot = Bot(config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

#########
Members = Members('main.db')
Product = Product('main.db')
Basket = Basket('main.db')
Orders = Orders('main.db')
Keys = Keys('main.db')
author = 1871078732
#########

@dp.message_handler(commands=['start'])
async def start(message: types.Message):

    if Members.chek_registration(message.from_user.id) == False:
        if await enter_state(message, 3) == True:

            await enter_state(message, 1)
    else:
        await main_menu(message)


@dp.message_handler(commands='info')
async def info(message):
    text = '*Boshki üíúNeonüíú -* –°–æ—á–Ω—ã–π –º–∏–∫—Å –∞—Ä–±—É–∑–∞ –∏ –µ–∂–µ–≤–∏–∫–∏, —É–∫—Ä–∞—à–µ–Ω–Ω—ã–π —Ö–≤–æ–π–Ω–æ–π –≤–µ—Ç–æ—á–∫–æ–π.\n‚ûñ‚ûñ‚ûñ\n' \
           '*Boshki ü••Exoticü•• -* –ö–æ–∫—Ç–µ–π–ª—å –∏–∑ –∞–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–æ–≥–æ –º–∞–Ω–≥–æ —Å –º—è–∫–æ—Ç—å—é –∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–æ–π –¥—ã–Ω–∏ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å —Å–∏–±–∏—Ä—Å–∫–æ–π —Ö–≤–æ–µ–π.\n‚ûñ‚ûñ‚ûñ\n' \
           '*Boshki üçé–°–∞–¥–æ–≤—ã–µüçê -* –í–∫—É—Å —Å–æ—á–Ω–æ–π –∫–ª—É–±–Ω–∏–∫–∏ –≤ —Ö–≤–æ–π–Ω–æ–º –ª–µ—Å—É —Ç–≤–æ–µ–≥–æ –¥–µ–¥–∞.\n‚ûñ‚ûñ‚ûñ\n' \
           '*Boshki –î–æ–±—Ä—ã–µ on ice üßä -* –õ—é–±–∏–º—ã–π –≤–∫—É—Å —Ö–≤–æ–π–Ω–æ–≥–æ —â–µ—Ä–±–µ—Ç–∞ –≤ –≥–ª—É–±–æ–∫–æ–π –∑–∞–º–æ—Ä–æ–∑–∫–µ\n‚ûñ‚ûñ‚ûñ\n' \
           '*Boshki ‚ù§–ó–ª—ã–µ‚ù§Ô∏è-* –ú–∏–∫—Å –æ—Ç VoodooLab —Å–æ –≤–∫—É—Å–æ–º —Ö–≤–æ–∏, –ª–∏–º–æ–Ω–∞–¥–∞ –∏ —Å–º–æ—Ä–æ–¥–∏–Ω—ã. ... –í–∫—É—Å –ª–∏–º–æ–Ω–∞–¥–∞ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–π –∑–∞—Ç—è–∂–∫–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ —Å–µ–±–µ –æ—â—É—â–µ–Ω–∏–µ–º –ª–∏–º–æ–Ω–Ω–æ–π —Å–≤–µ–∂–µ—Å—Ç–∏ –Ω–∞ –ø–æ—Å–ª–µ–≤–∫—É—Å–∏–∏.\n‚ûñ‚ûñ‚ûñ\n' \
           '*Boshki üîÖoriginalüîÖ -* –ß—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –∫–æ—Ñ–µ–π–Ω—ã–µ –∑–µ—Ä–Ω–∞, –Ω–µ–±–æ–ª—å—à–∞—è –¥–æ–ª—è —Å–ª–∞–¥–æ—Å—Ç–∏, –±—É–∫–µ—Ç –ª–µ—Å–Ω—ã—Ö –∞—Ä–æ–º–∞—Ç–æ–≤.\n‚ûñ‚ûñ‚ûñ\n' \
           '*Boshki üåø–¶–µ–ª–µ–±–Ω—ã–µüåø -* –°–æ –≤–∫—É—Å–æ–º —Ç—Ä–∞–≤—è–Ω–æ–≥–æ —á–∞—è —Å –º—ë–¥–æ–º, –Ω–∞—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –Ω–∞ –µ–ª–æ–≤—ã—Ö –≤–µ—Ä—Ö—É—à–∫–∞—Ö.\n‚ûñ‚ûñ‚ûñ\n' \
           '*Boshki üëæ–î–æ–±—Ä—ã–µü§ç -* –ß—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ\n' \

    await message.answer(text=text, parse_mode='Markdown')


@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
    if await chek_admin(message):
        await admin_panel(message)
    else:
        pass

@dp.message_handler(commands=['add'])
async def add_product(message: types.Message):
    if await chek_admin(message):
        print('a')
        if len(message.text.split()) >= 4:
            product_info = message.text.split()
            product_name = ' '.join(product_info[1:-2])
            product_price = float(product_info[-2])
            product_count = int(product_info[-1])
            print(product_name, product_price, product_count)
            Product.add_product(product_name, product_price, product_count)

            await bot.send_message(message.chat.id, '*–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω*', parse_mode='Markdown')


@dp.message_handler(commands=['del'])
async def delete_product(message: types.Message):
    print(message.text.split())
    if await chek_admin(message):
        if len(message.text.split()) == 3:
            del_info = message.text.split()

            id = del_info[1]
            if del_info[-1].isdigit():
                count = del_info[-1]
            elif del_info[-1] == 'all':
                count = 'all'
            Product.del_product(id, count)
            await bot.send_message(message.chat.id, '–¢–æ–≤–∞—Ä –∏–∑–º–µ–Ω—ë–Ω')


@dp.message_handler(commands=['mailing'])
async def mailing(message: types.Message):
    if await chek_admin(message):
        if len(message.text.split()) >= 2:
            erors = 0
            secc = 0
            for user in Members.get_members():
                try:
                    await bot.send_message(user[1], ' '.join(message.text.split()[1:]), parse_mode='Markdown')
                    secc+=1
                except:
                   erors+=1
            await bot.send_message(author, f'–£—Å–ø–µ—à–Ω–æ: {secc}\n–û—à–∏–±–∫–∏: {erors}')


@dp.message_handler(commands=['newcode'])
async def new_code(message: types.Message):
    if await chek_admin(message):
        if len(message.text.split()) == 2:
            try:
                config.CODE = ''.join(message.text.split()[1:])
                await message.answer('–ö–æ–¥ –∏–∑–º–µ–Ω—ë–Ω')
            except:
                await message.answer('–û—à–∏–±–∫–∞')




async def show_products(message: types.Message):
    if await chek_admin(message):
        products_info = Product.show_products()
        text = []
        try:
            for product in products_info:
                t = []
                for i in range(0, len(product)):
                    if i == 0:
                        t.append(f'*[{product[0]}]*')
                    elif i == 1:
                        t.append(f'   _–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:_ *{product[i]}*')
                    elif i == 2:
                        t.append(f' üí≤_–¶–µ–Ω–∞_: *{product[i]}—Ä*')
                    elif i == 3:
                        t.append(f' _–ö–æ–ª-–≤–æ:_ *{product[i]}*')

                text.append(' '.join(t) + '\n\n')
            await bot.send_message(message.chat.id, ' '.join(text), parse_mode='Markdown')
        except:
            await  bot.send_message(message.chat.id, '–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç')


@dp.message_handler()
async def echo_message(message: types.Message):
    msg = message.text
    print(msg, message.from_user.id)
    if msg == '–ü—Ä–æ—Ñ–∏–ª—å üë§':
        await get_profile(message=message)

    if msg == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üó£':
        await bot.send_message(message.chat.id, '*–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @bad_drip_support*', parse_mode='Markdown')

    if msg == '–ö–æ—Ä–∑–∏–Ω–∞ üõí':
        await get_basket(message)
    ###############
    # SHOP#
    if msg == '–ú–∞–≥–∞–∑–∏–Ω üè¨':
        await shop_menu(message)
    if msg == 'üíß –ñ–∏–¥–∫–æ—Å—Ç–∏':
        await all_zizha(message)
    elif msg == 'üìè –û–¥–Ω–æ—Ä–∞–∑–∫–∏':
        await message.answer('*–°–∫–æ—Ä–æ*', parse_mode='Markdown')
    ###############
    # SHOP#
    if msg == 'üîô':
        await main_menu(message)

    #########################
    # ADMIN#
    #########################

    if msg == 'üì¶ –¢–æ–≤–∞—Ä—ã' and await chek_admin(message):
        await show_products(message)

    if msg == 'ü§ñ –ö–æ–º–∞–Ω–¥—ã' and await chek_admin(message):
        await bot.send_message(message.chat.id, '_/add <–ù–∞–∏–º–∏–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞> <–¶–µ–Ω–∞> <–ö–æ–ª-–≤–æ> -_ *–¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä*\n\n'
                                                '_/del <–ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞> <–∫–æ–ª-–≤–æ> -_ *—É–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä*(all-–≤—Å—ë)\n\n'
                                                '/mailing <–¢–µ–∫—Å—Ç> - —Ä–∞—Å—Å—ã–ª–∫–∞\n\n'
                                                '/newcode <–ö–æ–¥> - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –≤—Ö–æ–¥–∞',
                               parse_mode='Markdown')

    if msg == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' and await chek_admin(message):
        print(Product.show_products())
        await bot.send_message(message.chat.id, f'*üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(Members.get_members())}*\n\n'
                                                f'*üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(Product.show_products())}*',
                               parse_mode='Markdown')
    #########################
    # ADMIN#
    #########################


async def enter_state(message, arg):
    if arg == 1:
        mrk = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—åüîú')
        await bot.send_message(message.chat.id,
                               '*–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —ç—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏*\n_–ü—Ä–∏–º–µ—Ä: +375445642275_',
                               parse_mode='Markdown', reply_markup=mrk)
        await States.S1.set()
    elif arg == 2:
        mrk = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–û—Ç–º–µ–Ω–∞')

        await bot.send_message(message.chat.id, '*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n_–ü—Ä–∏–º–µ—Ä: +375445642275_',
                               parse_mode='Markdown', reply_markup=mrk)
        await States.S2.set()
    elif arg == 3:
        await bot.send_message(message.chat.id, '*–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á*',
                               parse_mode='Markdown')
        await States.S3.set()


@dp.message_handler(state=States.S3)
async def get_code(message: types.Message, state: FSMContext):
    if message.text == config.CODE:
        await enter_state(message, 1)
    else:
        await state.reset_state(with_data=True)
        await message.answer('*–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥*', parse_mode='Markdown')
        return False


@dp.message_handler(state=States.S1)
async def get_number(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—åüîú':
        Members.registration(message)
        Basket.create_basket(message.from_user.id)
        Orders.registration(message.from_user.id)
        await state.update_data(answer1=answer)
        await state.reset_state(with_data=True)
        await main_menu(message)
    elif answer.startswith('+375'):
        if len(answer) == 13:
            Members.registration(message)
            Basket.create_basket(message.from_user.id)
            Orders.registration(message.from_user.id)
            await state.update_data(answer1=answer)
            await state.reset_state(with_data=True)
            await message.answer('*–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω*', parse_mode='Markdown')

            await main_menu(message)
        else:
            await bot.send_message(message.chat.id, '*–ù–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä*', parse_mode='Markdown')
    else:
        await bot.send_message(message.chat.id, '*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø–æ –ø—Ä–∏–º–µ—Ä—É*', parse_mode='Markdown')


@dp.message_handler(state=States.S2)
async def edit_phone_number(message: types.Message, state: FSMContext):
    phone = message.text

    if phone == '–û—Ç–º–µ–Ω–∞':
        await state.reset_state(with_data=True)
        await main_menu(message)
    else:

        if phone.startswith('+375'):
            if len(phone) == 13:

                Members.edit_phone_number(phone, message.from_user.id)
                await state.reset_state(with_data=True)
                await main_menu(message)
            else:
                await bot.send_message(message.chat.id, '*–ù–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä*', parse_mode='Markdown')
        else:
            await bot.send_message(message.chat.id, '*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø–æ –ø—Ä–∏–º–µ—Ä—É*', parse_mode='Markdown')





async def main_menu(message):
    mrp = types.ReplyKeyboardMarkup(resize_keyboard=True)
    basket = '–ö–æ—Ä–∑–∏–Ω–∞ üõí'
    profile = '–ü—Ä–æ—Ñ–∏–ª—å üë§'
    shop = '–ú–∞–≥–∞–∑–∏–Ω üè¨'
    support = '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üó£'
    mrp.add(shop).add(basket).add(profile, support)

    await bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', parse_mode='Markdown', reply_markup=mrp)


async def get_profile(message):
    print(message.text)
    print(Members.get_profile(message.from_user.id))
    user_info = Members.get_profile(message.from_user.id)[0]
    ID = user_info[1]
    user_name = user_info[3]
    phone_number = user_info[-1]

    mrk = types.InlineKeyboardMarkup()
    if phone_number:
        mrk.add(types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä', callback_data='edit_phone_number'))
        await bot.send_message(message.chat.id,
                               f'*üë§–ü—Ä–æ—Ñ–∏–ª—å\n\nüîÖ –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è: {user_name}\n\nüÜî –í–∞—à ID: {ID}\n\nüìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{phone_number}\n\n–ö–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {config.CODE}*',
                               reply_markup=mrk, parse_mode='Markdown')

    else:
        mrk.add(types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data='enter_phone_number'))
        await bot.send_message(message.chat.id, f'*üë§–ü—Ä–æ—Ñ–∏–ª—å\n\nüîÖ –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è: {user_name}\n\nüÜî –í–∞—à ID: {ID}\n\n–ö–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {config.CODE}*',
                               reply_markup=mrk, parse_mode='Markdown')


async def shop_menu(message):
    mrk = types.ReplyKeyboardMarkup(resize_keyboard=True)
    mrk.add('üíß –ñ–∏–¥–∫–æ—Å—Ç–∏', 'üìè –û–¥–Ω–æ—Ä–∞–∑–∫–∏').add('üîô')
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', parse_mode='Markdown', reply_markup=mrk)


async def get_basket(message):
    mrk = types.InlineKeyboardMarkup()
    clear = types.InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='clear_basket')
    buy = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data='buy_basket')
    mrk.add(clear).add(buy)

    user_id = message.from_user.id
    basket_info = Basket.get_basket(user_id)
    print(basket_info)
    if basket_info[2] == 0:
        await message.answer('*üò≥ –ó–¥–µ—Å—å –ø—É—Å—Ç–æ!*', parse_mode='Markdown')
    else:
        text = basket_info[2][1:]
        price = basket_info[-1]
        await message.answer(f'*üõí –ö–æ—Ä–∑–∏–Ω–∞\n\n–¢–æ–≤–∞—Ä—ã:\n{text}\n\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price}—Ä*', parse_mode='Markdown',
                             reply_markup=mrk)


async def all_zizha(message):
    mrk = types.InlineKeyboardMarkup()
    product_info = Product.show_products()
    for product in product_info:
        product_name = product[1]
        product_price = product[2]
        btn = types.InlineKeyboardButton(text=product_name + ' - ' + str(product_price) + '—Ä',
                                         callback_data=f'| {product_name} {product_price}')
        mrk.add(btn)

    await bot.send_message(message.chat.id, '*–ñ–∏–¥–∫–æ—Å—Ç–∏*', parse_mode='Markdown', reply_markup=mrk)
    await main_menu(message)


@dp.callback_query_handler()
async def process_callback_kb1btn1(call: types.CallbackQuery):
    print(call.data)


    if call.data.startswith('|'):
        product_info = call.data.split()
        product_name = product_info[1]
        product_price = float(product_info[-1])
        Basket.add_in_basket(call.message.chat.id, product_price,
                             f"{' '.join(call.data.split()[1:-1])} - {product_price}—Ä")

        await bot.answer_callback_query(call.id, f"{' '.join(call.data.split()[1:-1])} –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É")

    if call.data == 'edit_phone_number':
        await enter_state(message=call.message, arg=2)
    elif call.data == 'enter_phone_number':
        await enter_state(message=call.message, arg=2)

    if call.data == 'clear_basket':
        Basket.clear_basket(call.message.chat.id)
        await call.message.edit_text('*–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞*', parse_mode='Markdown')
    elif call.data == 'buy_basket':

        chek_order = Orders.chek_order(call.message.chat.id)
        if chek_order == True:
            mrk = types.InlineKeyboardMarkup()
            card = types.InlineKeyboardButton('üí≥', callback_data='card_pay')
            money = types.InlineKeyboardButton('üí¥', callback_data='money_pay')
            mrk.add(card, money)
            await call.message.answer('*–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*', parse_mode='Markdown', reply_markup=mrk)

        else:
            mrk = types.InlineKeyboardMarkup()
            delet_order = types.InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='delete_order')
            mrk.add(delet_order)
            await call.message.answer('*–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–∫–∞–∑\n–ñ–µ–ª–∞–µ—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å ?*', parse_mode='Markdown',
                                      reply_markup=mrk)

    if call.data == 'card_pay':
        price = Basket.get_basket(call.message.chat.id)[-1]

        if price != 0:
            mrk = types.InlineKeyboardMarkup()
            pay = types.InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å', url=await get_order(price, Keys.get_key()))
            chek_pay = types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂—å üîÑ', callback_data='chek_pay')
            mrk.add(pay).add(chek_pay)
            key = Keys.get_key()
            print(key)
            Orders.get_params(price, key, call.message.chat.id)
            await call.message.answer(f'*üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞\n\nüí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price}—Ä\n\n–í–ù–ò–ú–ê–ù–ò–ï –í –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ö –ü–ï–†–ï–í–û–î–£ –£–ö–ê–ñ–ò–¢–ï {key}\n–ò–Ω–∞—á–µ –≤–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–µ –±—É–¥–µ—Ç –∑–∞–º–µ—á–µ–Ω*', parse_mode='Markdown',
                                      reply_markup=mrk)
            await call.message.answer(key)
        else:
            await call.message.answer('*–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞*', parse_mode='Markdown')

    elif call.data == 'money_pay':
        price = Basket.get_basket(call.message.chat.id)[-1]

        if price != 0:
            user = Members.get_profile(call.message.chat.id)[0]
            print(user)
            phone = user[-1]
            user_name =  user[3]
            if user_name:
                user_name = '@' + user_name

            else:
                user_name = user_name

            first_name = user[2]
            key = Keys.get_key()
            print(key)
            Orders.get_params(price, key, call.message.chat.id)
            await send_author(call.message.chat.id, user_name, first_name, phone)
            await call.message.answer('*‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è*', parse_mode='Markdown')
        else:
            await call.message.answer('*‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞*', parse_mode='Markdown')




    if call.data == 'delete_order':
        try:
            Orders.get_params(None, None, call.message.chat.id)
            await call.message.answer('*üóë –ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω*', parse_mode='Markdown')
        except:
            pass

    if call.data == 'chek_pay':
        info = Orders.get_order(call.message.chat.id)
        print(info)
        if await chekk_pay(call.message, info[-1], info[0]) == False:
            await call.message.answer('*‚ùå –ü–ª–∞—Ç—ë–∂—å –Ω–µ –Ω–∞–π–¥–µ–Ω*', parse_mode='Markdown')
        else:
            await   call.message.answer('*‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂—å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω*\n_–í –±–ª–∏–∂–∞–π—à–∏–µ 10 –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è_',
                                   parse_mode='Markdown')
            user = Members.get_profile(call.message.chat.id)[0]
            print(user)
            phone = user[-1]
            user_name = '@' + user[3]
            first_name = user[2]
            await send_author(call.message.chat.id, user_name, first_name, phone)


async def get_order(price, user_id):
    print(price)
    print(config.KURS)
    print(price*config.KURS)
    print(round(price*config.KURS))
    url = f'https://qiwi.com/payment/form/99999?extra[%27accountType%27]=nickname&extra[%27account%27]=BADDRIPSHOP&amountInteger={round(price * config.KURS)}&amountFraction=0&extra%5B[%27comment%27]%5D={user_id}&currency=643'
    # url1 = f'https://qiwi.com/payment/form/99?extra%5B%27account%27%5D={config.QIWI_PHONE}&amountInteger={price}&amountFraction=0&extra%5B%27comment%27%5D={user_id}&currency=643'

    return url


async def chekk_pay(message, key, price):
    api_access_token = 'a518ca1e92e50254089820a1f136f888'
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' + api_access_token
    parameters = {'rows': 10}
    h = s.get(f'https://edge.qiwi.com/payment-history/v2/persons/{config.QIWI_PHONE}/payments', params=parameters)

    k = {}

    for i in range(0, len(h.json()['data'])):
        sum = h.json()['data'][i]['sum']['amount']
        comment = h.json()['data'][i]['comment']
        k[comment] = sum
    print(k)
    for o in k.keys():
        print(o, key)
        if o == key:
            print(round(price * config.KURS))
            if k[o] == round(price * config.KURS):
                print(price*config.KURS)
                return True
            break
    await bot.send_message(message.chat.id, '–ö–∞—Ä—Ç–∞')
    return False

######################################################
######################################################
######################################################
async def chek_admin(message):
    if message.from_user.id in ADMIN:
        print('f')
        return True
    else:
        return False


async def admin_panel(message):
    mrk = types.ReplyKeyboardMarkup(resize_keyboard=True)

    statistics = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    product = 'üì¶ –¢–æ–≤–∞—Ä—ã'
    commands = 'ü§ñ –ö–æ–º–∞–Ω–¥—ã'

    back = 'üîô'

    mrk.add(statistics).add(product).add(commands).add(back)

    await bot.send_message(message.chat.id, '–ê–¥–º–∏–Ω–∫–∞', reply_markup=mrk)

async def send_author(basket_id, user_name, firstname, phone):
    info = Basket.get_basket(basket_id)
    text = f'*‚ûñ‚ûñ‚ûñ‚ûñ\n‚ûñ–ó–∞–∫–∞–∑‚ûñ\n‚ûñ‚ûñ‚ûñ‚ûñ\n\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{info[2][1:]}\n\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {info[3]}\n\n–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è: {user_name}\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {firstname}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}*'
    await bot.send_message(author, text=text, parse_mode='Markdown')


######################################################
######################################################
######################################################


async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


if __name__ == '__main__':
    executor.start_polling(dp, on_shutdown=shutdown)
